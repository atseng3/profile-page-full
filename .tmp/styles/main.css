/*
 * HTML5 Boilerplate
 *
 * What follows is the result of much research on cross-browser styling.
 * Credit left inline and big thanks to Nicolas Gallagher, Jonathan Neal,
 * Kroc Camen, and the H5BP dev community and team.
 */
/* ==========================================================================
   Base styles: opinionated defaults
   ========================================================================== */
html, button, input, select, textarea {
  color: #222; }

body {
  font-size: 1em;
  line-height: 1.4; }

a {
  color: #00e; }

a:hover {
  color: #06e; }

/*
 * Remove the gap between images and the bottom of their containers: h5bp.com/i/440
 */
img {
  vertical-align: middle; }

/*
 * Remove default fieldset styles.
 */
fieldset {
  border: 0;
  margin: 0;
  padding: 0; }

/*
 * Allow only vertical resizing of textareas.
 */
textarea {
  resize: vertical; }

/* ==========================================================================
   Author's custom styles
   ========================================================================== */
/* ==========================================================================
   Helper classes
   ========================================================================== */
/* Prevent callout */
.nocallout {
  -webkit-touch-callout: none; }

.pressed {
  background-color: rgba(0, 0, 0, 0.7); }

/* A hack for HTML5 contenteditable attribute on mobile */
textarea[contenteditable] {
  -webkit-appearance: none; }

/* A workaround for S60 3.x and 5.0 devices which do not animated gif images if
   they have been set as display: none */
.gifhidden {
  position: absolute;
  left: -100%; }

/*
 * Image replacement
 */
.ir {
  background-color: transparent;
  background-repeat: no-repeat;
  border: 0;
  direction: ltr;
  display: block;
  overflow: hidden;
  text-align: left;
  text-indent: -999em; }

.ir br {
  display: none; }

/*
 * Hide from both screenreaders and browsers: h5bp.com/u
 */
.hidden {
  display: none !important;
  visibility: hidden; }

/*
 * Hide only visually, but have it available for screenreaders: h5bp.com/v
 */
.visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px; }

/*
 * Extends the .visuallyhidden class to allow the element to be focusable
 * when navigated to via the keyboard: h5bp.com/p
 */
.visuallyhidden.focusable:active, .visuallyhidden.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  width: auto; }

/*
 * Hide visually and from screenreaders, but maintain layout
 */
.invisible {
  visibility: hidden; }

/**
 * Clearfix helper
 * Used to contain floats: h5bp.com/q
 */
.clearfix::before, .clearfix::after {
  content: "";
  display: table; }

.clearfix::after {
  clear: both; }

/* ==========================================================================
   EXAMPLE Media Queries for Responsive Design.
   Theses examples override the primary ('mobile first') styles.
   Modify as content requires.
   ========================================================================== */
/*! normalize.css v3.0.1 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11 and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article, aside, details, figcaption, figure, footer, header, main, nav, section, summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio, canvas, progress, video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden], template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b, strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Remove margin
 */
figure {
  margin: 0; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code, kbd, pre, samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button, input, optgroup, select, textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button, select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button, html input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled], html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"], input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td, th {
  padding: 0; }

/* Blockquote
   ========================================================================== */
blockquote {
  margin: 0; }

/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
@font-face {
  font-family: 'icomoon';
  src: url('../fonts/icomoon.eot?ftqdr4');
  src: url('../fonts/icomoon.eot?#iefixftqdr4') format('embedded-opentype'), url('../fonts/icomoon.woff?ftqdr4') format('woff'), url('../fonts/icomoon.ttf?ftqdr4') format('truetype'), url('../fonts/icomoon.svg?ftqdr4#icomoon') format('svg');
  font-weight: normal;
  font-style: normal; }

[class^="icon-"], [class*=" icon-"] {
  font-family: 'icomoon';
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  /* Enable Ligatures ================ */
  -webkit-font-feature-settings: "liga";
  -moz-font-feature-settings: "liga=1";
  -moz-font-feature-settings: "liga";
  -ms-font-feature-settings: "liga" 1;
  -o-font-feature-settings: "liga";
  font-feature-settings: "liga";
  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

/*
.icon-LOGO:before {
	content: "\4c";
}*/
#mobile-header .mobile-hamburger:before, #mobile-header #mobile-header__brand:after, .nav-items:before, article#projects .projects__container .container__items:before, article .title .mobile-hamburger:before {
  font-family: 'icomoon';
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  /* Enable Ligatures ================ */
  -webkit-font-feature-settings: "liga";
  -moz-font-feature-settings: "liga=1";
  -moz-font-feature-settings: "liga";
  -ms-font-feature-settings: "liga" 1;
  -o-font-feature-settings: "liga";
  font-feature-settings: "liga"; }

* {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-family: 'Ubuntu', sans-serif; }

html {
  height: 100vh; }

body {
  min-height: 100%;
  height: 100%; }

#page-holder {
  background: url('../images/profileHD-compressor.jpg') no-repeat right 36%;
  background-size: cover;
  height: 100%; }

section {
  height: 100%; }

aside {
  background: rgba(0, 0, 0, 0.6); }

.header-mobile-show {
  display: none; }

.mobile-hide {
  display: block; }

.mobile-show {
  display: block; }

#mobile-header {
  display: none;
  width: 100%;
  height: 100px;
  position: absolute;
  top: 0;
  text-align: center; }
  #mobile-header .mobile-hamburger:before {
    content: "\e8b6";
    font-size: 30px;
    position: absolute;
    left: 20px;
    line-height: 100px;
    color: #FFF; }
  #mobile-header #mobile-header__brand:after {
    content: "\e60d";
    font-size: 40px;
    line-height: 100px;
    color: #FFF; }

#mobile-nav-mask {
  height: 100%;
  position: fixed;
  left: 0;
  z-index: 100; }

#global-nav {
  height: 100%;
  width: 100px;
  display: inline-block;
  text-align: center; }

#nav-brand {
  background: #7AB3B5;
  margin-bottom: 50px;
  line-height: 100px; }
  #nav-brand:hover {
    color: #c84e4b; }

#nav-brand:before {
  content: "\e60d";
  line-height: 80px; }

.nav-items {
  line-height: 10px;
  -webkit-transition: all 1s ease;
          transition: all 1s ease; }
  .nav-items.selected {
    color: #7AB3B5; }
  .nav-items:hover {
    color: #7AB3B5; }
  .nav-items:before {
    display: block;
    font-size: 40px;
    line-height: 60px; }

#nav-profile:before {
  content: "\e89b"; }

#nav-projects:before {
  content: "\e608"; }

#nav-contacts:before {
  content: "\e6ee"; }

a {
  display: block;
  height: 80px;
  padding: 10px 0px;
  color: #FFF;
  font-size: 14px;
  cursor: pointer;
  text-decoration: none;
  text-transform: uppercase; }

article {
  display: inline-block;
  background: rgba(0, 0, 0, 0.4);
  width: -webkit-calc(100% - 100px);
  width: calc(100% - 100px);
  vertical-align: top;
  height: 100%;
  position: absolute;
  right: 0; }
  article .title {
    text-transform: uppercase;
    color: #C89F4B;
    font-size: 30px;
    height: 99px;
    text-align: center;
    border-bottom: 1px solid #FFF8EB;
    vertical-align: center;
    line-height: 100px; }

article#desc {
  background: none;
  margin-left: 35px;
  font-weight: 300;
  color: white;
  font-size: 40px; }
  article#desc p {
    top: 41%;
    position: absolute;
    margin-left: 35px; }
  article#desc span {
    font-weight: 700;
    text-shadow: 0px 0px 1px #000; }
  article#desc #learn-more {
    color: #FFF;
    font-weight: 100;
    font-size: 20px;
    background: rgba(0, 0, 0, 0.6);
    display: block;
    border: 1px inset #000;
    width: 170px;
    height: 40px;
    text-align: center;
    line-height: 40px;
    cursor: pointer;
    border-radius: 150px;
    -webkit-transition: all 0.5s ease;
            transition: all 0.5s ease;
    text-shadow: none;
    text-decoration: none; }
  article#desc #learn-more:hover {
    background: white;
    color: black; }

article#profile {
  overflow-y: scroll;
  -webkit-overflow-scrolling: touch; }
  article#profile p {
    width: 80%;
    color: #FFF;
    font-size: 20px;
    margin: 50px auto; }
    article#profile p .profile-subtitle {
      font-weight: 500;
      color: #C89F4B; }

article#projects {
  overflow-y: scroll;
  -webkit-overflow-scrolling: touch; }
  article#projects .projects__container {
    text-align: center; }
    article#projects .projects__container .container__items {
      text-decoration: none;
      cursor: pointer;
      margin: 20px;
      display: inline-block;
      width: 200px;
      height: 250px;
      font-size: 25px;
      border: 1px solid white;
      border-radius: 10px;
      text-align: center;
      position: relative;
      color: #FFF;
      vertical-align: top;
      -webkit-transition: all 0.2s ease;
              transition: all 0.2s ease; }
    article#projects .projects__container .container__items:hover {
      background: #7AB3B5;
      color: rgba(0, 0, 0, 0.8);
      border: 1px solid #7AB3B5; }
      article#projects .projects__container .container__items:hover:before {
        color: rgba(0, 0, 0, 0.8); }
    article#projects .projects__container .container__items:before {
      color: #FFF;
      font-size: 100px;
      line-height: 200px;
      display: block;
      -webkit-transition: all 0.2s ease;
              transition: all 0.2s ease; }
    article#projects .projects__container .mic:before {
      content: "\e609"; }
    article#projects .projects__container .tile:before {
      content: "\e607"; }
    article#projects .projects__container .baconbnb:before {
      content: "\e602"; }
    article#projects .projects__container .subscription:before {
      content: "\e600"; }
    article#projects .projects__container .container__items-name {
      line-height: 20px; }

.slideLeftIn {
  opacity: 1;
  -webkit-transition: opacity 0.5s, width 0.4s;
          transition: opacity 0.5s, width 0.4s;
  width: -webkit-calc(100% - 100px);
  width: calc(100% - 100px);
  height: 100%; }

.fadeIn {
  opacity: 1;
  -webkit-transition: opacity 1s;
          transition: opacity 1s; }

.hide {
  overflow: hidden;
  opacity: 0;
  -webkit-transition: opacity 0.5s, width 0.4s;
          transition: opacity 0.5s, width 0.4s;
  width: 0;
  height: 0; }

@media only screen and (max-width: 480px) {
  #desc p {
    font-size: 25px; }
    #desc p #learn-more {
      font-size: 15px;
      width: 150px;
      height: 20px;
      line-height: 20px;
      margin-top: 40px; }
  .header-mobile-show {
    display: block; }
  .header-mobile-hide {
    display: none; }
  #mobile-nav-mask.mobile-hide {
    width: 0;
    height: 0;
    opacity: 0;
    -webkit-transition: width 0.3s, opacity 0.5s;
            transition: width 0.3s, opacity 0.5s;
    overflow: hidden; }
    #mobile-nav-mask.mobile-hide #global-nav {
      width: 0;
      -webkit-transition: width 0.3s;
              transition: width 0.3s; }
  #mobile-nav-mask.mobile-show {
    width: 100%;
    height: 100%;
    opacity: 1;
    -webkit-transition: width 0.3s, opacity 0.5s;
            transition: width 0.3s, opacity 0.5s; }
    #mobile-nav-mask.mobile-show #global-nav {
      width: 250px;
      -webkit-transition: width 0.3s;
              transition: width 0.3s; }
  #mobile-header.header-mobile-show {
    z-index: 100;
    display: block; }
  #mobile-nav-mask {
    width: 100%;
    display: inline-block;
    clear: both; }
    #mobile-nav-mask #global-nav {
      width: 250px;
      height: inherit;
      background: #424242; }
      #mobile-nav-mask #global-nav .nav-items {
        line-height: 80px;
        vertical-align: top; }
        #mobile-nav-mask #global-nav .nav-items:before {
          line-height: 80px;
          display: inline;
          margin: 0px 10px; }
  .slideLeftIn {
    width: 100%; }
  article {
    width: 100%; }
    article .title {
      background: rgba(0, 0, 0, 0.6); }
      article .title .mobile-hamburger:before {
        content: "\e8b6";
        color: #FFF;
        font-size: 30px;
        line-height: 100px;
        position: absolute;
        left: 20px; } }


/*# sourceMappingURL=data:application/json;base64, */